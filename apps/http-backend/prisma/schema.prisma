datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  username    String    @unique
  email       String    @unique
  image       String? //profile 
  posterImage String? //poster 
  createdAt   DateTime  @default(now())
  posts       Post[]    @relation("UserPosts")
  rooms       MapRoom[] @relation("UserRooms")
  mapRooms    MapRoom[] @relation("MapRoomCreator")
  gigs        Gig[]     @relation("GigCreator")
}

model Post {
  id        Int      @id @default(autoincrement())
  username  String
  name      String
  content   String
  imageUrls String[]
  location  String?
  createdAt DateTime @default(now())
  user      User     @relation("UserPosts", fields: [username], references: [username])
  

  // Added the relation name "RoomPosts" to match the 'posts' field in MapRoom
  room      MapRoom? @relation("RoomPosts", fields: [roomId], references: [id])
  roomId    Int?
}

model MapRoom {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())

  createdBy User @relation("MapRoomCreator", fields: [creatorId], references: [id])
  creatorId Int

  members User[] @relation("UserRooms")


  posts     Post[]   @relation("RoomPosts")
  type      String?

  imageUrl String?
  gigs     Gig[]  @relation("RoomGigs")
}

model Gig {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  latitude    Float
  longitude   Float
  date        DateTime?
  createdAt   DateTime @default(now())

  createdBy User @relation("GigCreator", fields: [creatorId], references: [id])
  creatorId Int

  room   MapRoom? @relation("RoomGigs", fields: [roomId], references: [id])
  roomId Int?

  type String?

  imageUrls String[] @default([])
}
